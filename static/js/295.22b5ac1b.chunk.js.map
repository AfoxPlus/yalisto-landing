{"version":3,"file":"static/js/295.22b5ac1b.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledButton = styled(\"button\") <{ color?: string }>`\n  background: ${(p) => p.color || \"#EC4A0A\"};\n  color: ${(p) => (p.color ? \"#EC4A0A\" : \"#fff\")};\n  font-size: 1rem;\n  font-weight: 700;\n  width: 100%;\n  border: 1px solid #F5FAFF;\n  border-radius: 4px;\n  padding: 13px 0;\n  cursor: pointer;\n  margin-top: 0.625rem;\n  max-width: 180px;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: #fff;\n    border: 1px solid rgb(255, 133, 58);\n    background-color: rgb(255, 133, 58);\n  }\n`;\n","import { StyledButton } from \"./styles\";\nimport { ButtonProps } from \"../types\";\n\nexport const Button = ({ color, children, onClick }: ButtonProps) => (\n  <StyledButton color={color} onClick={onClick}>\n    {children}\n  </StyledButton>\n);\n","import { useState } from \"react\";\nimport { notification } from \"antd\";\n\ninterface IValues {\n  name: string;\n  email: string;\n  message: string;\n}\n\nconst initialValues: IValues = {\n  name: \"\",\n  email: \"\",\n  message: \"\",\n};\n\nexport const useForm = (validate: { (values: IValues): IValues }) => {\n  const [formState, setFormState] = useState<{\n    values: IValues;\n    errors: IValues;\n  }>({\n    values: { ...initialValues },\n    errors: { ...initialValues },\n  });\n\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const values = formState.values;\n    const errors = validate(values);\n    setFormState((prevState) => ({ ...prevState, errors }));\n\n    const url = \"\"; // Fill in your API URL here\n\n    try {\n      if (Object.values(errors).every((error) => error === \"\")) {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(values),\n        });\n\n        if (!response.ok) {\n          notification[\"error\"]({\n            message: \"Error\",\n            description:\n              \"Hubo un error al enviar su mensaje, por favor intente nuevamente más tarde.\",\n          });\n        } else {\n          event.target.reset();\n          setFormState(() => ({\n            values: { ...initialValues },\n            errors: { ...initialValues },\n          }));\n\n          notification[\"success\"]({\n            message: \"Success\",\n            description: \"¡Tu mensaje ha sido enviado!\",\n          });\n        }\n      }\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: \"No se pudo enviar el formulario. Inténtelo nuevamente más tarde.\",\n      });\n    }\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    event.persist();\n    const { name, value } = event.target;\n    setFormState((prevState) => ({\n      ...prevState,\n      values: {\n        ...prevState.values,\n        [name]: value,\n      },\n      errors: {\n        ...prevState.errors,\n        [name]: \"\",\n      },\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values: formState.values,\n    errors: formState.errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation, TFunction } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: TFunction;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")`\n  display: block;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type as keyof typeof errors];\n    return <Span>{ErrorMessage}</Span>;\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\" triggerOnce>\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction=\"right\" triggerOnce>\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["StyledButton","styled","p","color","Button","_ref","children","onClick","_jsx","initialValues","name","email","message","validate","values","errors","test","Content","Container","TextWrapper","withTranslation","title","content","t","_jsxs","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","handleChange","handleSubmit","formState","setFormState","useState","event","persist","value","target","prevState","async","preventDefault","Object","every","error","fetch","method","headers","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea"],"sourceRoot":""}